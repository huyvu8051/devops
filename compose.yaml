version: "3.8"
services:
  #  sba:
  #    container_name: sba
  #    build:
  #      context: .
  #    ports:
  #      - "8080:8080"    # App port
  #      - "9010:9010"    # JMX port for VisualVM
  #    environment:
  #      - SPRING_PROFILES_ACTIVE=dev
  #      - TOMCAT_MAX_THREADS=500
  #      - TOMCAT_MAX_CONNECTIONS=10000
  #      - TOMCAT_ACCEPT_COUNT=200
  #      - TOMCAT_CONNECTION_TIMEOUT=30000
  #      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/mydatabase
  #      - SPRING_DATASOURCE_USERNAME=myuser
  #      - SPRING_DATASOURCE_PASSWORD=secret
  #      - SPRING_DATASOURCE_DRIVER-CLASS-NAME=org.postgresql.Driver
  #    deploy:
  #      resources:
  #        limits:
  #          cpus: "2"
  #          memory: "1g"
  #        reservations:
  #          cpus: "1"
  #          memory: "512m"
  #    volumes:
  #      - "./docker/tmp-hprof:/tmp"

  #  light-message:
  #    image: docker.io/library/light-message:0.0.1-SNAPSHOT
  #    container_name: nsba
  #    ports:
  #      - "8080:8080"
  #    environment:
  #      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/mydatabase
  #      - SERVER_TOMCAT_THREADS_MAX=4
  #      - SPRING_DATA_JPA_REPOSITORIES_BOOTSTRAP_MODE=lazy


  postgres:
    container_name: postgres
    image: "postgres:17.2"
    restart: unless-stopped
    environment:
      - "POSTGRES_DB=mydatabase"
      - "POSTGRES_PASSWORD=secret"
      - "POSTGRES_USER=myuser"
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "3.0"
    networks:
      - cloudflare
   
  #  schema-registry:
  #    image: confluentinc/cp-schema-registry:7.5.0
  #    depends_on:
  #      - kafka
  #    environment:
  #      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
  #      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
  #      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
  #      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672" # C·ªïng RabbitMQ
      - "15672:15672" # C·ªïng giao di·ªán qu·∫£n l√Ω web
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    deploy:
      resources:
        limits:
          memory: 256M # Gi·ªõi h·∫°n b·ªô nh·ªõ t·ªëi ƒëa
          cpus: "2.0" # Gi·ªõi h·∫°n s·ª≠ d·ª•ng CPU (1 CPU)
    networks:
      - cloudflare
          
  #  k6:
  #    container_name: k6
  #    image: grafana/k6:latest
  #    environment:
  #      BASE_URL: "http://sba:8080/api/v1"
  #    volumes:
  #      - ./k6/:/scripts/:ro
  #
  #    command: run /scripts/send_message.js

  redis:
    image: redis:6.2
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - cloudflare
 
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    networks:
      - cloudflare
     
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/datasources/:/etc/grafana/provisioning/datasources/
      - ./docker/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - cloudflare


# start keycloak

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.1
    container_name: keycloak
    environment:
      KC_DB: dev-mem
      KC_HOSTNAME: keycloak.huyvu.asia
      KC_HTTP_ENABLED: 'true'
      KC_HTTP_PORT: 8080
      KEYCLOAK_ADMIN : admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    # ports:
    #  - 8085:8080
    command:
      - start-dev
    networks:
      - cloudflare
# end keycloak

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Web UI
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - cloudflare

  nexus:
    image: sonatype/nexus3:3.79.1
    container_name: nexus
    restart: unless-stopped
    ports:
      - "8081:8081" # nexus ui & http api
      - "5000:5000" # Docker registry port
    environment:
      - NEXUS_SECURITY_RANDOMPASSWORD=false
      - NEXUS_ADMIN_PASSWORD=Admin123 # change this!
    volumes:
      - nexus-data:/nexus-data
    networks:
      - cloudflare

  jenkins:
    container_name: jenkins
    image: jenkins/jenkins:lts
    user: root # üí• Quan tr·ªçng: ƒë·ªÉ c√≥ quy·ªÅn truy c·∫≠p docker.sock
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - cloudflare
    cap_add:
      - NET_BIND_SERVICE

  cloudflared:
    image: cloudflare/cloudflared:2025.4.0 # ghim phi√™n b·∫£n m·ªõi nh·∫•t ·ªïn ƒë·ªãnh
    container_name: cloudflared
    restart: unless-stopped
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN} # ƒë·∫∑t trong file .env ƒë·ªÉ kh·ªèi l·ªô token
    command: tunnel run # m·∫∑c ƒë·ªãnh
    healthcheck:
      test: ["CMD", "cloudflared", "tunnel", "info"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cloudflare

  jenkins-agent:
    image: jenkins/inbound-agent:latest
    restart: unless-stopped
    environment:
      JENKINS_URL: https://jenkins.huyvu.asia/
      JENKINS_AGENT_NAME: docker-agent
      JENKINS_SECRET: ${JENKINS_SECRET}
      JENKINS_WEB_SOCKET: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - agent-workdir:/home/jenkins

volumes:
  grafana-data:
  nexus-data:
  minio_data:
  jenkins_home:
  agent-workdir:

networks:
  cloudflare:


